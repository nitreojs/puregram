import { readFile, writeFile } from 'node:fs/promises'
import { resolve } from 'node:path'

import { Message } from '../../packages/puregram/src/common/structures'

const CONSTANTS_PATH = resolve(__dirname, '..', '..', 'packages', 'puregram', 'src', 'utils', 'constants.ts')
const TYPES_PATH = resolve(__dirname, '..', '..', 'packages', 'puregram', 'src', 'types', 'types.ts')

const getGetters = (instance: Message) => (
  Object.entries(
    Object.getOwnPropertyDescriptors(
      Reflect.getPrototypeOf(instance)
    )
  ).filter(e => typeof e[1].get === 'function' && e[0] !== '__proto__')
    .map(e => e[0])
)

const convertToSnakeCase = (value: string) => (
  value.replace(/([A-Z])/g, '_$1').toLowerCase()
)

const main = async () => {
  let constantsTsContent = await readFile(CONSTANTS_PATH, 'utf8')
  let typesTsContent = await readFile(TYPES_PATH, 'utf8')

  const message = new Message({ chat: { id: 0, type: 'channel' }, date: 0, message_id: 1 })
  const rawGetters = getGetters(message)

  const eventsIndex = rawGetters.findIndex(e => e === 'newChatMembers')
  const getters = rawGetters.slice(eventsIndex)

  // INFO: generate-constants-events-name
  {
    const events: string[] = []
    const additionalGetters: string[] = ['location', 'passport_data']

    for (const getter of [...getters, ...additionalGetters]) {
      events.push(convertToSnakeCase(getter))
    }

    const MessageEventName = `export type MessageEventName = ${events.map(event => `'${event}'`).join(' | ')}`
    const content = `// @autogenerated generate-constants-events-name start\n${MessageEventName}\n// @autogenerated generate-constants-events-name end`

    typesTsContent = typesTsContent.replace(/\/\/\s@autogenerated\sgenerate-constants-events-name\sstart\n(.*?)\n\/\/\s@autogenerated\sgenerate-constants-events-name\send/is, content)

    console.log(`[generate-constants-events-name] successfully generated ${events.length - 1} event names`)
  }

  // INFO: generate-constants-events
  {
    const clauses: string[] = []

    // ['newChatMembers', 'new_chat_members'],
    for (const getter of getters) {
      clauses.push(`['${getter}', '${convertToSnakeCase(getter)}'],`)
    }

    const additionalGetters: [string, string][] = [
      ['location', 'location'],
      ['passportData', 'passport_data']
    ]

    for (const [key, value] of additionalGetters) {
      clauses.push(`['${key}', '${value}'],`)
    }

    const EVENTS = `export const EVENTS: [keyof Message, MessageEventName][] = [\n${clauses.map(clause => `  ${clause}`).join('\n').slice(0, -1)}\n]`
    const content = `// @autogenerated generate-constants-events start\n${EVENTS}\n// @autogenerated generate-constants-events end`

    constantsTsContent = constantsTsContent.replace(/\/\/\s@autogenerated\sgenerate-constants-events\sstart\n(.*?)\n\/\/\s@autogenerated\sgenerate-constants-events\send/is, content)

    console.log(`[generate-constants-events] successfully generated ${clauses.length - 1} events clauses`)
  }

  await writeFile(CONSTANTS_PATH, constantsTsContent)
  await writeFile(TYPES_PATH, typesTsContent)
}

main().catch(console.error)
